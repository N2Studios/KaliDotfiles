#!/bin/bash

# ╭─────────────────────────────────────────────────────────────────────────────────╮
# │ PROJECT LAUNCHER - CYBER OPS DEVELOPMENT                                       │
# │ Quick project selection and launching script                                   │
# │ Uses fzf for fuzzy finding and supports multiple editors                       │
# │ Optimized for security and performance                                         │
# ╰─────────────────────────────────────────────────────────────────────────────────╯

set -euo pipefail  # Enhanced error handling
export PATH="/usr/local/bin:/usr/bin:/bin"  # Security: restrict PATH
umask 022  # Security: set secure file permissions

# Project directories to search
PROJECT_DIRS=(
    "$HOME/Projects"
    "$HOME/Dev"
    "$HOME/Work"
    "$HOME/Repos"
    "$HOME/Code"
    "$HOME/.config"
)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to find projects
find_projects() {
    local projects=()
    
    for dir in "${PROJECT_DIRS[@]}"; do
        if [[ -d "$dir" ]]; then
            # Find directories with git repositories
            while IFS= read -r -d '' project; do
                projects+=("$project")
            done < <(find "$dir" -maxdepth 3 -type d -name ".git" -printf '%h\0' 2>/dev/null)
            
            # Find directories with common project files
            while IFS= read -r -d '' project; do
                projects+=("$project")
            done < <(find "$dir" -maxdepth 2 -type f \( -name "package.json" -o -name "Cargo.toml" -o -name "pyproject.toml" -o -name "Makefile" -o -name "CMakeLists.txt" \) -printf '%h\0' 2>/dev/null | sort -uz)
        fi
    done
    
    # Remove duplicates and sort
    printf '%s\n' "${projects[@]}" | sort -u
}

# Function to get project info
get_project_info() {
    local project_path="$1"
    local project_name
    local project_type=""
    local git_branch=""
    
    project_name=$(basename "$project_path")
    
    # Determine project type
    if [[ -f "$project_path/package.json" ]]; then
        project_type="Node.js"
    elif [[ -f "$project_path/Cargo.toml" ]]; then
        project_type="Rust"
    elif [[ -f "$project_path/pyproject.toml" ]] || [[ -f "$project_path/requirements.txt" ]]; then
        project_type="Python"
    elif [[ -f "$project_path/Makefile" ]]; then
        project_type="C/C++"
    elif [[ -f "$project_path/go.mod" ]]; then
        project_type="Go"
    elif [[ -f "$project_path/.gitignore" ]]; then
        project_type="Git"
    else
        project_type="Unknown"
    fi
    
    # Get git branch if it's a git repository
    if [[ -d "$project_path/.git" ]]; then
        git_branch=$(cd "$project_path" && git symbolic-ref --short HEAD 2>/dev/null || echo "detached")
    fi
    
    # Format the display string
    local display_string="$project_name"
    if [[ -n "$project_type" ]]; then
        display_string="$display_string [$project_type]"
    fi
    if [[ -n "$git_branch" ]]; then
        display_string="$display_string (git:$git_branch)"
    fi
    display_string="$display_string | $project_path"
    
    echo "$display_string"
}

# Function to open project
open_project() {
    local project_path="$1"
    local editor="$2"
    
    echo -e "${GREEN}Opening project:${NC} $project_path"
    echo -e "${BLUE}Editor:${NC} $editor"
    
    case "$editor" in
        "nvim")
            alacritty --working-directory "$project_path" -e nvim .
            ;;
        "code")
            code "$project_path"
            ;;
        "terminal")
            alacritty --working-directory "$project_path"
            ;;
        "tmux")
            session_name=$(basename "$project_path" | tr '.' '_')
            if ! tmux has-session -t "$session_name" 2>/dev/null; then
                tmux new-session -d -s "$session_name" -c "$project_path"
                tmux split-window -h -p 30 -c "$project_path"
                tmux select-pane -t 0
                tmux send-keys -t "$session_name:0.0" "nvim ." Enter
            fi
            alacritty -e tmux attach-session -t "$session_name"
            ;;
        "ranger")
            alacritty --working-directory "$project_path" -e ranger
            ;;
        *)
            echo -e "${RED}Unknown editor:${NC} $editor"
            exit 1
            ;;
    esac
}

# Main function
main() {
    # Check if fzf is installed
    if ! command -v fzf &> /dev/null; then
        echo -e "${RED}Error:${NC} fzf is not installed. Please install it first."
        exit 1
    fi
    
    echo -e "${CYAN}🔍 Finding projects...${NC}"
    
    # Find all projects
    local projects
    mapfile -t projects < <(find_projects)
    
    if [[ ${#projects[@]} -eq 0 ]]; then
        echo -e "${YELLOW}No projects found in the configured directories.${NC}"
        echo -e "${BLUE}Configured directories:${NC}"
        printf '  %s\n' "${PROJECT_DIRS[@]}"
        exit 1
    fi
    
    # Create display list with project info
    local display_list=()
    for project in "${projects[@]}"; do
        display_list+=("$(get_project_info "$project")")
    done
    
    # Use fzf to select project
    local selected
    selected=$(printf '%s\n' "${display_list[@]}" | fzf \
        --height=40% \
        --border \
        --preview 'echo {} | sed "s/.*| //" | xargs ls -la' \
        --preview-window=right:50% \
        --prompt="Select project: " \
        --header="Use Ctrl+C to cancel" \
        --color="bg:#0A0A0A,fg:#FFFFFF,hl:#FF4F00,fg+:#FFFFFF,bg+:#333333,hl+:#FF6B00,border:#FF4F00,prompt:#FF4F00,pointer:#FF4F00,marker:#FF4F00,spinner:#FF4F00,header:#CCCCCC")
    
    if [[ -z "$selected" ]]; then
        echo -e "${YELLOW}No project selected.${NC}"
        exit 0
    fi
    
    # Extract project path from selection
    local project_path
    project_path=$(echo "$selected" | sed 's/.*| //')
    
    # Select editor
    local editor
    editor=$(echo -e "nvim\ncode\nterminal\ntmux\nranger" | fzf \
        --height=15% \
        --border \
        --prompt="Select editor: " \
        --header="Choose how to open the project" \
        --color="bg:#0A0A0A,fg:#FFFFFF,hl:#FF4F00,fg+:#FFFFFF,bg+:#333333,hl+:#FF6B00,border:#FF4F00,prompt:#FF4F00,pointer:#FF4F00,marker:#FF4F00,spinner:#FF4F00,header:#CCCCCC")
    
    if [[ -z "$editor" ]]; then
        echo -e "${YELLOW}No editor selected.${NC}"
        exit 0
    fi
    
    # Open the project
    open_project "$project_path" "$editor"
}

# Run main function
main "$@" 