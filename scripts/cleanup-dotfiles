#!/bin/bash

# ╭─────────────────────────────────────────────────────────────────────────────────╮
# │ DOTFILES CLEANUP SCRIPT - CYBER OPS OPTIMIZATION                              │
# │ Removes deprecated files, clears caches, and optimizes system                  │
# │ Maintains peak performance for cybersecurity operations                        │
# ╰─────────────────────────────────────────────────────────────────────────────────╯

set -euo pipefail

# Configuration
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly ORANGE='\033[0;33m'
readonly NC='\033[0m'

# Utility functions
print_header() {
    echo -e "${BLUE}╭─────────────────────────────────────────────────────────────────────────────────╮${NC}"
    echo -e "${BLUE}│ $1${NC}"
    echo -e "${BLUE}╰─────────────────────────────────────────────────────────────────────────────────╯${NC}"
}

print_step() {
    echo -e "${GREEN}[CLEANUP]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Main cleanup function
main_cleanup() {
    print_header "CYBER OPS DOTFILES CLEANUP & OPTIMIZATION"
    
    # Remove deprecated configurations
    print_step "Removing deprecated configuration files..."
    
    # Remove old Alacritty YAML config if it exists (2025 optimization)
    if [[ -f "$HOME/.config/alacritty/alacritty.yml" ]]; then
        print_warning "Removing deprecated alacritty.yml (modern TOML format in use)"
        rm -f "$HOME/.config/alacritty/alacritty.yml"
    fi
    
    # Remove duplicate tmux configs (proper location is ~/.tmux.conf)
    if [[ -d "$HOME/.config/tmux" ]]; then
        print_warning "Removing deprecated .config/tmux directory"
        rm -rf "$HOME/.config/tmux"
        print_success "Cleaned up tmux configuration architecture"
    fi
    
    # Remove deprecated installation files (if any remain)
    for deprecated_file in tmux-setup.sh TMUX_SETUP.md; do
        if [[ -f "$SCRIPT_DIR/$deprecated_file" ]]; then
            print_warning "Removing deprecated file: $deprecated_file"
            rm -f "$SCRIPT_DIR/$deprecated_file"
        fi
    done
    
    # Remove redundant documentation files
    if [[ -f "$HOME/.config/nvim/lua/plugins/lsp-setup.md" ]]; then
        print_warning "Removing redundant LSP documentation"
        rm -f "$HOME/.config/nvim/lua/plugins/lsp-setup.md"
    fi
    
    # Remove empty directories
    for empty_dir in "$HOME/.config/sierra" "$SCRIPT_DIR/wallpapers"; do
        if [[ -d "$empty_dir" && -z "$(ls -A "$empty_dir" 2>/dev/null)" ]]; then
            print_warning "Removing empty directory: $(basename "$empty_dir")"
            rmdir "$empty_dir" 2>/dev/null || true
        fi
    done
    
    # Clean package caches
    print_step "Cleaning package caches..."
    sudo apt autoremove -y
    sudo apt autoclean
    
    # Clean tmux plugin cache
    if [[ -d "$HOME/.tmux/plugins" ]]; then
        print_step "Optimizing tmux plugins..."
        # Remove unused plugin directories
        for plugin_dir in "$HOME/.tmux/plugins"/*; do
            if [[ -d "$plugin_dir" ]]; then
                plugin_name=$(basename "$plugin_dir")
                if ! grep -q "@plugin.*$plugin_name" "$HOME/.tmux.conf" 2>/dev/null; then
                    print_warning "Removing unused tmux plugin: $plugin_name"
                    rm -rf "$plugin_dir"
                fi
            fi
        done
    fi
    
    # Clean Neovim caches
    print_step "Cleaning Neovim caches..."
    if [[ -d "$HOME/.local/share/nvim" ]]; then
        # Clean old swap and backup files
        find "$HOME/.local/share/nvim" -name "*.swap" -delete 2>/dev/null || true
        find "$HOME/.local/share/nvim" -name "*.bak" -delete 2>/dev/null || true
        find "$HOME/.local/share/nvim" -name "*~" -delete 2>/dev/null || true
    fi
    
    # Clean font cache
    print_step "Refreshing font cache..."
    fc-cache -fv > /dev/null
    
    # Clean temporary files
    print_step "Cleaning temporary files..."
    sudo rm -rf /tmp/hyprland-install.log 2>/dev/null || true
    
    # Optimize shell history
    print_step "Optimizing shell history..."
    if [[ -f "$HOME/.zsh_history" ]]; then
        # Remove duplicate entries
        awk '!seen[$0]++' "$HOME/.zsh_history" > "/tmp/zsh_history_clean"
        mv "/tmp/zsh_history_clean" "$HOME/.zsh_history"
    fi
    
    # Clean up old log files
    print_step "Cleaning old log files..."
    if [[ -d "$HOME/.tmux/logs" ]]; then
        # Remove logs older than 30 days
        find "$HOME/.tmux/logs" -type f -mtime +30 -delete 2>/dev/null || true
    fi
    
    # Verify critical configurations
    print_step "Verifying critical configurations..."
    
    local errors=0
    
    # Check if modern Alacritty config exists
    if [[ ! -f "$HOME/.config/alacritty/alacritty.toml" ]]; then
        print_error "Missing modern Alacritty configuration (TOML format)"
        ((errors++))
    fi
    
    # Check if tmux config exists
    if [[ ! -f "$HOME/.tmux.conf" ]]; then
        print_error "Missing tmux configuration"
        ((errors++))
    fi
    
    # Check if Hyprland config exists
    if [[ ! -f "$HOME/.config/hypr/hyprland.conf" ]]; then
        print_error "Missing Hyprland configuration"
        ((errors++))
    fi
    
    # Report results
    print_header "CLEANUP COMPLETE"
    
    if [[ $errors -eq 0 ]]; then
        echo -e "${GREEN}✅ All configurations verified successfully${NC}"
        echo -e "${GREEN}✅ System optimized for peak performance${NC}"
        echo -e "${GREEN}✅ Deprecated files removed${NC}"
        echo -e "${GREEN}✅ Caches cleaned${NC}"
    else
        echo -e "${RED}❌ $errors configuration errors found${NC}"
        echo -e "${YELLOW}⚠️  Run install.sh to fix missing configurations${NC}"
    fi
    
    # System status
    echo -e "\n${BLUE}📊 SYSTEM STATUS:${NC}"
    echo -e "  • Disk space freed: $(du -sh /tmp ~/.cache 2>/dev/null | awk '{sum+=$1} END {print sum "M"}' || echo 'Unknown')"
    echo -e "  • Configuration files: $(find ~/.config -name "*.conf" -o -name "*.toml" -o -name "*.lua" | wc -l) active"
    echo -e "  • Tmux plugins: $(find ~/.tmux/plugins -maxdepth 1 -type d 2>/dev/null | wc -l) installed"
    echo -e "  • Font families: $(fc-list : family | cut -d, -f1 | sort -u | wc -l) available"
    
    echo -e "\n${ORANGE}🚀 Your cyber ops environment is now optimized!${NC}"
}

# Security check
check_permissions() {
    print_step "Checking file permissions..."
    
    # Ensure critical files have correct permissions
    chmod 600 "$HOME/.tmux.conf" 2>/dev/null || true
    chmod 700 "$HOME/.config" 2>/dev/null || true
    chmod -R 700 "$HOME/.ssh" 2>/dev/null || true
    
    # Make scripts executable
    chmod +x "$HOME/.config/scripts/"* 2>/dev/null || true
}

# Performance optimization
optimize_performance() {
    print_step "Applying performance optimizations..."
    
    # Optimize git configuration
    git config --global core.preloadindex true 2>/dev/null || true
    git config --global core.fscache true 2>/dev/null || true
    git config --global gc.auto 256 2>/dev/null || true
    
    # Optimize shell startup
    if [[ -f "$HOME/.zshrc" ]]; then
        # Remove duplicate PATH entries
        if ! grep -q "# Remove duplicate PATH entries" "$HOME/.zshrc"; then
            cat >> "$HOME/.zshrc" << 'EOF'

# Remove duplicate PATH entries (added by cleanup script)
if [ -n "$PATH" ]; then
    old_PATH=$PATH:; PATH=
    while [ -n "$old_PATH" ]; do
        x=${old_PATH%%:*}
        case $PATH: in
            *:"$x":*) ;;
            *) PATH=$PATH:$x;;
        esac
        old_PATH=${old_PATH#*:}
    done
    PATH=${PATH#:}
    unset old_PATH x
fi
EOF
        fi
    fi
}

# Main execution
main() {
    echo -e "${ORANGE}"
    cat << 'EOF'
╭─────────────────────────────────────────────────────────────────────────────────╮
│                                                                                 │
│   ██████╗██╗     ███████╗ █████╗ ███╗   ██╗██╗   ██╗██████╗                   │
│  ██╔════╝██║     ██╔════╝██╔══██╗████╗  ██║██║   ██║██╔══██╗                  │
│  ██║     ██║     █████╗  ███████║██╔██╗ ██║██║   ██║██████╔╝                  │
│  ██║     ██║     ██╔══╝  ██╔══██║██║╚██╗██║██║   ██║██╔═══╝                   │
│  ╚██████╗███████╗███████╗██║  ██║██║ ╚████║╚██████╔╝██║                       │
│   ╚═════╝╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝                       │
│                                                                                 │
│                        CYBER OPS OPTIMIZATION                                  │
│                                                                                 │
╰─────────────────────────────────────────────────────────────────────────────────╯
EOF
    echo -e "${NC}"
    
    main_cleanup
    check_permissions
    optimize_performance
    
    echo -e "\n${GREEN}🎯 Cleanup and optimization complete!${NC}"
    echo -e "${BLUE}💡 Run this script monthly to maintain peak performance${NC}"
}

# Execute main function
main "$@" 